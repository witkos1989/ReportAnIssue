@model ReportAnIssue.ViewModels.AccountRolesViewModel



@using (Html.BeginForm("Create", "AccountRole"))
    {
@Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Dodaj uprawnienia użytkownikowi</h4>
    <hr />
    @if (User.IsInRole("Admin"))
    {
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Email, "E-mail", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Role, "Uprawnienia", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Role, Model.Roles)
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.HiddenFor(model => model.Id)
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Dodaj uprawnienie" class="btn btn-default" />
            </div>
        </div>
    }
</div>

    }

@using (Html.BeginForm("Delete", "AccountRole"))
    {
@Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Usuń uprawnienia użytkownikowi</h4>
    <hr />
    @if (User.IsInRole("Admin"))
    {
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Email, "E-mail", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Role, "Uprawnienia", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Role, Model.Roles)
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.HiddenFor(model => model.Id)
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Usuń uprawnienie" class="btn btn-default" />
            </div>
        </div>
    }
</div>
    }
<div>
    @Html.ActionLink("Wróć", "Index", "Manage", routeValues: null, htmlAttributes: new { title = "Manage" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
